<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Martha Kelly]]></title>
  <link href="http://marthakelly.github.com/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://marthakelly.github.com/"/>
  <updated>2013-03-10T19:41:12-05:00</updated>
  <id>http://marthakelly.github.com/</id>
  <author>
    <name><![CDATA[Martha Kelly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[how browsers work]]></title>
    <link href="http://marthakelly.github.com/blog/2013/01/21/how-browsers-work/"/>
    <updated>2013-01-21T14:52:00-06:00</updated>
    <id>http://marthakelly.github.com/blog/2013/01/21/how-browsers-work</id>
    <content type="html"><![CDATA[<p>You know a bit about HTML, CSS, and JavaScript but do you now how a browser gets and uses these files to display a website?</p>

<p>A browser has a UI (user interface) that most commonly includes an address bar, back/forward button, and reload button. Sometimes developers refer to this as the "chrome" (little "c", not Chrome by Google) of a browser. When you navigate to a URL in the address bar you are making a "request" for the content at that URL.</p>

<p><img src="http://marthakelly.github.com/images/google-chrome.png"></p>

<p>That URL you typed into the address bar maps to an IP address. This is called a DNS lookup. DNS stands for "Domain Name System" and it maps numeric computer addresses to human readable names. All computers have an IP address. You can find out your personal computer's IP address by typing "ifconfig" into your terminal window and looking for the number that is displayed in dot decimal format, such as 000.000.000.000. (Note that 127.0.0.1 is used in your computer internally to refer to itself).</p>

<p>For example, one IP address for Google is 74.125.134.102. You can enter 74.125.134.102 in the address bar and it will show the contents at www.google.com.</p>

<p>Once the browser has the IP address it sends an HTTP request to the web server at that address. HTTP stands for "Hypertext Transfer Protocol" and is used to facilitate requests from your client (the browser) and responses from the server. In our case the response is HTML from the web server at www.google.com.</p>

<p>As this HTML response is being sent to your browser, the browser's rendering engine is displaying the requested content on your screen. To accomplish this the rendering engine "parses" the HTML and creates a DOM tree.</p>

<p>To illustrate this, the rendering engine takes this HTML response:</p>

<pre><code>// Simplified Google.com markup
&lt;!DOCTYPE html&gt; 
&lt;html&gt; 
    &lt;head&gt; 
        &lt;title&gt;Google&lt;/title&gt;  
        &lt;link rel="stylesheet" href="css/style.css" 
            type="text/css" /&gt; 
    &lt;/head&gt; 
    &lt;body class="home"&gt; 
        &lt;h1&gt;Google&lt;/h1&gt; 
        &lt;img alt="Google" src="http://marthakelly.github.com/logos/google.jpg"&gt;
        &lt;input&gt;
        &lt;button&gt;Google Search&lt;/button&gt;
    &lt;/body&gt; 
&lt;/html&gt; 
</code></pre>

<p>And turns it (conceptually) into a DOM tree <em>like</em> this:<br/>
(photoshop is being a PITA! I'll try to add an appropriate graph later)</p>

<p><img src="http://www.w3schools.com/htmldom/htmltree.gif"></p>

<p>The browser then parses style data (CSS or inline styles) and together with the HTML it constructs a render tree. The render tree displays rectangles (that represent divs, paragraphs, headlines, etc.) with a few visual attributes such as color and size dimensions. These rectangles are displayed in order on the page. Next, the browser lays out the contents in the position they will appear in the browser. The last step is "painting" where the elements are drawn on the screen.</p>

<p>As the browser is rendering the HTML it will find tags (like our link tag and our img tag) that require files from other URLs. The browser will send a request to the web server to get each of these files.</p>

<p>(Note: some interesting things happen in regards to caching but I'm overlooking them for now. I'll include them in a later post).</p>

<h3>Notes About Major Browsers</h3>

<p>Firefox uses the Gecko rendering engine, a Mozilla product. Both Safari and Chrome (and now Opera on mobile?) use Webkit as a rendering engine, which is an open source project. IE uses the Trident rendering engine.</p>

<p>If you're curious (as I am!) here's the world wide browser market share in 2012:</p>

<p>IE, 54.13%<br/>
Firefox, 19.99%<br/>
Chrome, 18.55%<br/>
Safari, 5.21%<br/>
Opera, 1.63%<br/>
Other, 0.49%</p>

<p>That was a quick and dirty overview. As the weeks go on I'll dive deeply into each component, even getting down through the deeper layers of the network reference model. If you're not sure what that is, you'll know soon! (Hint: it's how all those 0s and 1s travel over the wires).</p>

<p>Sources:<br/>
<a href="http://taligarsiel.com/Projects/howbrowserswork1.htm">http://taligarsiel.com/Projects/howbrowserswork1.htm</a><br/>
<a href="http://bgr.com/2012/11/01/browser-market-share-october-2012-chrome-internet-explorerer/">http://bgr.com/2012/11/01/browser-market-share-october-2012-chrome-internet-explorerer/</a></p>
]]></content>
  </entry>
  
</feed>
